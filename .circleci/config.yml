version: 2.1
jobs:
  backend:
    docker:
      - image: circleci/ruby:2.6.3
        environment:
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: circleci/postgres:11.3-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: backend_test
    steps:
      - checkout
      - restore_cache:
          keys:
            - deployments-gems-{{ checksum "backend/Gemfile.lock" }}
            - deployments-gems-
      - run: sudo apt install -y postgresql-client || true
      - run:
          name: install gems
          command: >
            gem install bundler --conservative &&
            bundle check --path=vendor/bundle ||
            bundle install --with development test --without production
            --path=vendor/bundle --jobs 4 --retry 3
          working_directory: backend
      - save_cache:
          key: deployments-gems-{{ checksum "backend/Gemfile.lock" }}
          paths:
            - backend/vendor/bundle
      - run:
          name: rubocop
          command: bundle exec rubocop
          working_directory: backend
      - run:
          name: setup db
          command: RAILS_ENV=test bundle exec rails db:create db:migrate
          working_directory: backend
      - run: mkdir ~/rspec
      - run:
          name: rspec
          command: bundle exec rspec -f d -f RspecJunitFormatter -o ~/rspec/rspec.xml
          working_directory: backend
      - store_test_results:
          path: ~/rspec
  frontend:
    docker:
      - image: circleci/node:12.4.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - deployments-npms-{{ checksum "frontend/package-lock.json" }}
            - deployments-npms-
      - run:
          name: install npms
          command: npm ci
          working_directory: frontend
      - save_cache:
          key: deployments-npms-{{ checksum "frontend/package-lock.json" }}
          paths:
            - backend/vendor/bundle
      - run:
          name: lint
          command: npm run lint
          working_directory: frontend
  build-backend:
    docker:
      - image: circleci/ruby:2.6.3
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - docker-cache-gems
      - restore_cache:
          keys:
            - docker-cache-backend
      - run: |
          docker load < gems.tar || true
          docker build -t gems --target gems --cache-from gems backend
          docker save gems > /caches/gems.tar

          docker load < backend.tar || true
          docker build -t backend --target dev --cache-from gems --cache-from backend backend
          docker save backend > /caches/backend.tar

          docker tag backend joinez/deployments-backend
          docker login -u $HUB_USER -p $HUB_PASSWORD
          docker push joinez/deployments-backend
      - save_cache:
          key: docker-cache-gems
          paths:
            - /caches/gems.tar
      - save_cache:
          key: docker-cache-backend
          paths:
            - /caches/backend.tar

workflows:
  version: 2
  test:
    jobs:
      - backend
      - frontend
      - build-backend:
          requires:
            - backend
            - frontend
          context: docker_hub
